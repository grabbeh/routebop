<!doctype html>
<head>
<%-include partials/head.ejs %>

<!--jQuery -->
<script src="https://maps-api-ssl.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
<script src="http://code.jquery.com/jquery-latest.js" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.0"></script>
<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"></script>
<script src="http://underscorejs.org/underscore-min.js" type="text/javascript"></script>


</head>
<body>
<div id="maincontainer">
<%-include partials/header.ejs %>
    <div id="body"> 
      <div id="container">

        <div class="userheader"><b><%= userId %></b></div>
        <div class="twelvecol"><div id="userinfo"></div></div>

    <div class="row">
            
          <div class="ninecol">
              <div id="usermap">
                    <div id="mymap"></div>
              </div>

              <div>
                    <div id="maptaglist"><b>Filter by tags</b></div>
                       <ul id="maptags"></ul>
              </div>

              <div id="showalltagsbutton" class="hide-element">Show all tags</div>

          </div>
          
          <div class="threecol last">
                <div id="show-route-list-header">Routes</div>
                    <ul id="showroutelist" class="maplist"></ul>
                </div>
      </div>

      </div>
    <div class="clearfooter"></div> 
</div>
    <div id="footer"></div>
</div>
</body>
</html>

<script>
var map;
var markersarray = [];
var mc;
var publicUser = <%- publicUser %>;
var maps = <%- userMaps %>
$(document).ready(function() {

    // initial create map function to push map bounds, add event listeners - for drag on push.
    create_map();
    processMapData(maps);
    mc = new MarkerClusterer(map, markersarray);
    map.fitBounds(bounds);
    $('#userinfo').append(publicUser.info);

    $('#maptags').delegate('li', 'click', function(){
            var submittag = $(this).text().trim();        
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxTagPost(boxarray, submittag);
            google.maps.event.clearListeners(map, 'idle');
            addTagListeners();
            $('#showalltagsbutton').removeClass('hide-element');
        })
    
        $('#showalltagsbutton').click(function(){
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxBoundsPost(boxarray);
            google.maps.event.clearListeners(map, 'idle');
            addMapListeners();
            $('#showalltagsbutton').addClass('hide-element');
        })

});

function create_map() {
var maps = <%- userMaps %>
console.log(maps);
var mapOptions = {
            center: new google.maps.LatLng(maps[0].loc[0], maps[0].loc[1]),
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControlOptions: {
                mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, "Toner"]
            },
            styles: [
      {
        "featureType": "landscape.man_made",
        "stylers": [
          { "hue": "#00b2ff" },
          { "saturation": 33 },
          { "gamma": 1.77 }
        ]
      }
    ],
            panControl: false,
            zoomControl: false,
            scaleControl: false,
            zoomControl: true,
            draggableCursor: "default",
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.SMALL
            },
            streetViewControl: false
        };
    
        map = new google.maps.Map(document.getElementById("mymap"), mapOptions);
        map.mapTypes.set("Toner", new google.maps.StamenMapType("toner"));
        bounds = new google.maps.LatLngBounds();
    
       // closing create map function
    };
    
    // function to clear overlays
    
    function clearOverlays() {
    if (mc){
       mc.clearMarkers();
    }
        if (markersarray) {
            for (i in markersarray) {
                markersarray[i].setMap(null);
            }
            markersarray.length = 0;
        }
        $('#showroutelist').children().remove().end();
        $('#maptags').children().remove().end();
    };
    
    // place marker function used in processMapData function
    
    function placeMarker(location, title) {
        var marker = new google.maps.Marker({
            position: location,
            map: map,
            flat: true
        });
    
        var infowindow = new google.maps.InfoWindow({
            content: title,
        });
        google.maps.event.addListener(marker, 'click', function() {
            if (infowindow.open) {
                infowindow.close();
            }
            google.maps.event.clearListeners(map, 'idle');
            infowindow.open(map, marker);   
        });
    
        $("<li>").html(title + "</li>").click(function(){
            google.maps.event.clearListeners(map, 'idle');
            infowindow.open(map, marker);     
    
            //map.panTo(marker.getLatLng());
          }).appendTo("#showroutelist");
        
        google.maps.event.addListener(infowindow, 'closeclick', function(){
        if ($('#maptags').children().length === 1) {
            addTagListeners();
        }
        else {
            addMapListeners();
        }
        })
        markersarray.push(marker);
    };
    
    function addMapListeners(){
            google.maps.event.addListener(map, "idle", function(){
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxBoundsPost(boxarray);
       })
    }
    
    function addTagListeners(){
            google.maps.event.addListener(map, "idle", function(){
            var newtag = $('#maptags').children().text().trim();     
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxTagPost(boxarray, newtag);
       })
    }
    
    function processMapData(maps) {
    var tagarrays = [];
    if (maps.length > 0) {
        for (var i = 0, j = maps.length; i < j; i++) {
            var marker = new google.maps.LatLng(maps[i].loc[0], maps[i].loc[1]);
            bounds.extend(marker);
            var url = maps[i]._id;
            var fullurl = "<span class=\"markerlink\"><a href='/show/" + url + "'>View route</a></span>";
            var title = "<span class=\"marker\">" + maps[i].title + " - " + fullurl + "</span";
            placeMarker(marker, title); 
            tagarrays.push(maps[i].tags);
        };
        
        var flatarray = _.flatten(tagarrays);
        var reducedarray = _.uniq(flatarray);
    
        for (var i = 0, j = reducedarray.length; i < j; i++) {
            var maptag = reducedarray[i].trim();
            $('#maptags').append("<li> " + maptag + " </li>");
        }
        return bounds;
    }
    else {
        var lat = map.getCenter().lat();
        var lng = map.getCenter().lng();
        var getparams = $.param({lat:lat, lng:lng});
        var locationurl = "Sorry - no routes for this place - maybe you'd like to add one <a href='/new?" + getparams + "'>here</a>";
        $("<li>").html(locationurl).appendTo("#showroutelist");
        }
    }
    
    function processTagData(maps) {
    
    if (maps.length > 0) {
        for (var i = 0, j = maps.length; i < j; i++) {
            var marker = new google.maps.LatLng(maps[i].loc[0], maps[i].loc[1]);
            bounds.extend(marker);
            var url = maps[i]._id;
            var fullurl = "<a href='/show/" + url + "'>Route</a></div>";
            var title = maps[i].title + " - " + fullurl + "";
            placeMarker(marker, title); 
            
        };
    }
    else {
        var lat = map.getCenter().lat();
        var lng = map.getCenter().lng();
        var getparams = $.param({lat:lat, lng:lng});
        var locationurl = "Sorry - no routes for this place - maybe you'd like to add one <a href='/new?" + getparams + "'>here</a>";
        $("<li>").html(locationurl).appendTo("#showroutelist");
        }
    }
    
    // takes bounds and uses internal methods to push map bounds into array to send to server
    
    function processMapBounds(postbounds) {
        boxarray = []; 
        var sw = postbounds.getSouthWest();
        var ne = postbounds.getNorthEast();
        boxarray.push(sw.lat());
        boxarray.push(sw.lng());
        boxarray.push(ne.lat());
        boxarray.push(ne.lng());
        return boxarray;
    }

    function ajaxBoundsPost(postbounds) {
    
        var obj = {
            mapbounds: boxarray,
            user: publicUser._id
        };
        var jobj = JSON.stringify(obj);
    
        $.ajax({
            url: "/user",
            type: "POST",
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(obj),
            success: function(data) {
                clearOverlays();
                processMapData(data);
                mc = new MarkerClusterer(map, markersarray);
            }
        });
    };
    
    function ajaxTagPost(postbounds, tag) {
    
        var obj = {
            mapbounds: boxarray,
            user: publicUser._id,
            tag: tag
        };
        $.ajax({
            url: "/user",
            type: "POST",
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(obj),
            success: function(data) {
                clearOverlays();
                processTagData(data);
                mc = new MarkerClusterer(map, markersarray);
                $('#maptags').append("<li> " + tag + " </li>")
            }
        });
    };
</script>

