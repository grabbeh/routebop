
<!doctype html>
<head>
<%-include head.ejs %>


<script src="https://maps-api-ssl.google.com/maps/api/js?sensor=false" type="text/javascript"></script>

<script src="http://underscorejs.org/underscore-min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.0"></script>
<link rel="stylesheet" href="/stylesheets/grumble.min.css">

<script type="text/javascript">

var map;
var geocoder;
var cpoints = [];
var cpts = [];
var places = [];
var poly;
var markersarray = [];
var update_timeout = null;
var markerdescs = [];
</script>

</head>
<body>

<ol id="tour" style="display:none;">
   
    <li data-target="#geolocate" data-angle="180">Any more queries? Ask at <a href="http://www.twitter.com/routebop">@Routebop</a> on twitter.</li>
</ol>



<div id="maincontainer">
<%-include header.ejs %>
    <div id="body"> 
        <div id="container">
             <div id="welcome"></div>
			
			<div class="row">
				 <% include geoandeditbuttons.ejs %>
			</div>

        <div id="map">
        <div id="mymap"></div>
        </div>

      
 
        <p id="output"></p>


        <div class="row">
          <div class="sixcol">
            Title<p><input class="newinputtwo" id="title" type="text"></p><p>Description</p>
            <textarea id="description" rows="4" type="text"></textarea><p>Tags (separated by a space please)</p><input class="newinputtags" id="tags" type="text">
          </div>
            <div class="fourcol"><div id="newcontentparent">Places (text boxes will appear below)</div></div>
            <div class="twocol last" id="newsubmitbuttons"> <span class="newsubmitbutton" id="user-submit">Submit</span></div>
        </div>
        <div id='lengthparent'><p>Distance</p><div id="length"></div></div>
        </div>
    <div class="clearfooter"></div>
</div>
<%- include footer.ejs %>
</div>
<script src="http://code.jquery.com/jquery-latest.js" type="text/javascript"></script>
<script src="/javascripts/jquery.crumble.min.js"></script>
<script src="/javascripts/jquery.grumble.min.js"></script>
    <script>$('#tour').crumble();</script>
 </body>
</html>

<script>

$(document).ready(function(){

// loads basic map with set centre
create_map();

// click function to run geolocation on click

$("#geolocateme").click(function(){ 
navigator.geolocation.getCurrentPosition(geolocate, function(){});
});

// click function to locate user by reference to submitted location

$('#userlocationsubmit').click(function(){
geocodeAddress();
});

// remove all markers and polylines

$("#removeall").click(function() {
    $('#newcontentparent').children().remove().end();
    clearOverlays();
    cpts.clear(); 
    places.splice(0, places.length);
});

// remove last marker 

$("#removelastmarker").click(function(){
    var lastmarker = _.last(markersarray);
    lastmarker.setMap(null);
    markersarray.pop();
    places.pop();
    $('#newcontentparent').children().last().remove().end();
});

$('#removelastline').click(function(){
    cpts.pop(); 
//    var lastp = _.last(cpts);
//    lastp.clear(); 
});


// click function to submit map by creating 'obj' which incorporates hopefully
// clickpoints and markers

$('#user-submit').click(function () {
      var tags = $('#tags').val().split(" ");
      var newtitle = $('#title').val();
      if (newtitle.length < 1) {
        alert('Please insert a title');
        return;
      }
      collectContent();
      convertWaypoints(cpts.b);
      var distance = poly.inKm().toFixed(2);
      var loc = [];
	    var locTwo = [];
      var x = cpts.b[0].lat();
      var y = cpts.b[0].lng();
      loc.push(x);
      loc.push(y);
	    locTwo.push(y);
	    locTwo.push(x);
      var obj = {
        loc: loc,
		    locTwo: locTwo,
        waypoints: newData,
        places: places,
        title: $('#title').val(),
        description: $('#description').val(),
        tags: tags,
        markerdescs: markerdescs,
        distance: distance
        };

    $.ajax({
        url: "/new",
        type: "POST",
        contentType: "application/json",
        processData: false,
        data: JSON.stringify(obj),
        success: function (data) {
              $('#output').html(data.message); 
                setTimeout(function() {
                window.location.href = "/show/" + data.id;
                }, 1000);
            }
        });
    });

});

// function to create basic map on load and add event listeners

function create_map() {
var mapOptions = {
    center: new google.maps.LatLng(51.50678771873268, -0.12717489055171427),
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapTypeControlOptions: {
         mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, "Toner"]
            },
    disableDoubleClickZoom: true,
    panControl: false,
    zoomControl: false,
    scaleControl: false,
    zoomControl: true,
    draggableCursor: "default",
    zoomControlOptions: {
      style: google.maps.ZoomControlStyle.SMALL
    },
    streetViewControl: false
    };
map = new google.maps.Map(document.getElementById("mymap"), mapOptions);
map.mapTypes.set("Toner", new google.maps.StamenMapType("toner"));

// polyline options
var lineSymbol = {
  path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
};

var polyOptions = {
  icons: [{
    icon: lineSymbol,
    offset: '0',
    repeat: '100px'
  }],
  strokeOpacity: 0.5,
  strokeWeight: 3,

  }

poly = new google.maps.Polyline(polyOptions);
poly.setMap(map);

// listener to add line on click

google.maps.event.addListener(map, 'click', function(event) {
update_timeout = setTimeout(function(){
        cpts = poly.getPath();
        cpts.push(event.latLng);
        var distance = poly.inKm().toFixed(2);
        $('#length').html("<p>"+ distance + " km");
    }, 400);
});

// listener to add marker on dblclick

google.maps.event.addListener(map,'dblclick', function(event) {
    clearTimeout(update_timeout);
    placeMarker(event.latLng);
    var place = event.latLng;
    var placeobj = new Object();
    placeobj['lat'] = place.lat();
    placeobj['lon'] = place.lng();
    places.push(placeobj);
    $('#newcontentparent').append('<p><input class="markerdescription" type="text"></p>')
  });

// listener to add marker on polyline click

google.maps.event.addListener(poly, 'click', function(event) {
    placeMarker(event.latLng);
    var place = event.latLng;
    var placeobj = new Object();
    placeobj['lat'] = place.lat();
    placeobj['lon'] = place.lng();
    places.push(placeobj);
    $('#newcontentparent').append('<p><input class="markerdescription" type="text"></p>')
});
// closing create map function
};

function placeMarker(location) {
  var marker = new google.maps.Marker({
      position: location,
      map: map,
  });
  markersarray.push(marker);
};

// function to clear markers

function clearOverlays() {
  if (markersarray) {
    for (i in markersarray) {
      markersarray[i].setMap(null);
    }
    markersarray.length = 0;
    places.length = 0;
  }
};

// function to collect marker descriptions

function collectContent() {
     $('.markerdescription').each(function(i){
        var content = $(this).val();
        markerdescs.push(content);
    })
} ;

// function to centre map if user geolocates

function geolocate(pos){
    center = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
    map.setCenter(center);
};

// geocode function if user inputs location

function geocodeAddress(){
     var paddress = $("#userlocation").val();
     geocoder = new google.maps.Geocoder();
     geocoder.geocode({'address': paddress}, function(results, status){
        if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
        }
        else{
            alert("Geocode was not successful for the following reason: " + status);
        }
     });
 };

google.maps.LatLng.prototype.kmTo = function(a){ 
    var e = Math, ra = e.PI/180; 
    var b = this.lat() * ra, c = a.lat() * ra, d = b - c; 
    var g = this.lng() * ra - a.lng() * ra; 
    var f = 2 * e.asin(e.sqrt(e.pow(e.sin(d/2), 2) + e.cos(b) * e.cos 
(c) * e.pow(e.sin(g/2), 2))); 
    return f * 6378.137; 
  } 

 google.maps.Polyline.prototype.inKm = function(n){ 
    var a = this.getPath(n), len = a.getLength(), dist = 0; 
    for(var i=0; i<len-1; i++){ 
      dist += a.getAt(i).kmTo(a.getAt(i+1)); 
    } 
    return dist; 
  } 


function convertWaypoints(arrayofwaypoints) {

    newData = [];
    for(var i = 0; i < arrayofwaypoints.length; i++) {
        var obj = new Object();
        obj['lat'] = arrayofwaypoints[i].lat();
        obj['lon'] = arrayofwaypoints[i].lng();
        newData.push(obj);
    }
    return newData;     
}

</script>


