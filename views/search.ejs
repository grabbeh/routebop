<!doctype html>
<head>
    <%-include partials/head.ejs %>

</head>
<body>
    <div id="maincontainer">
        <%-include partials/header.ejs %>
        <div id="body">
            <div id="container">
                <div class="row">
                    <% include partials/mapgeobuttons.ejs %>
                </div>
                <div class="row">
                    <div class="ninecol">
                        <div id="map">
                            <div id="mymap"></div>
                        </div>

                        <div>
                            <div id="maptaglist"><b>Filter by tags</b></div>
                            <ul id="maptags">
                            </ul>
                        </div>

                        <div id="showalltagsbutton" class="hide-element">Show all tags</div>
                    </div>
                    <div class="threecol last">
                        <div id="show-route-list-header">Routes</div>
                        <ul id="showroutelist" class="maplist"></ul>
                    </div>
                </div>
                
            </div>
            <div class="clearfooter"></div>
        </div>
        <div id="footer"></div>
    </div>
</body>
</html>
<script>
    var map;
    var markersarray = [];
    var mc;
    var infowindow = new google.maps.InfoWindow();

    $(document).ready(function() {
    
        // initial create map function to push map bounds, add event listeners - for drag on push.
        create_map();
    
        $('#userlocationsubmit').click(function() {
            geocodeAddress();
        });
    
        $('#userlocation').keypress(function (e) {
          if (e.which == 13) {
            geocodeAddress();   
          }
        });
    
        $("#geolocate").click(function() {
            navigator.geolocation.getCurrentPosition(geolocate, geolocateError,{timeout:5000});
        });
    
        $('#maptags').delegate('li', 'click', function(){
            var submittag = $(this).text().trim();        
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxTagPost(boxarray, submittag);
            google.maps.event.clearListeners(map, 'idle');
            addTagListeners();
            $('#showalltagsbutton').removeClass('hide-element');
    
        })
    
        $('#showalltagsbutton').click(function(){
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxBoundsPost(boxarray);
            google.maps.event.clearListeners(map, 'idle');
            addMapListeners();
            $('#showalltagsbutton').addClass('hide-element');
        })
    });
    
    function geolocate(pos) {
        center = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
        map.setCenter(center);
        // obtain bounds of map and push to server
        var postbounds = map.getBounds();
        processMapBounds(postbounds);
        ajaxBoundsPost(boxarray);
    };

    function geolocateError(error){
        alert(error.code)
    }
    
    function geocodeAddress() {
        var paddress = $("#userlocation").val();
        geocoder = new google.maps.Geocoder();
        geocoder.geocode({
            'address': paddress
        }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                var postbounds = map.getBounds();
                processMapBounds(postbounds);
                ajaxBoundsPost(boxarray);
            }
            else {
                alert("Geocode was not successful for the following reason: " + status);
            }
        });
    };
    
    function ajaxBoundsPost(postbounds) {
    
        var obj = {
            mapbounds: boxarray,
        };
        var jobj = JSON.stringify(obj);
    
        $.ajax({
            url: "/search",
            type: "POST",
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(obj),
            success: function(data) {
                clearOverlays();
                processMapData(data);
                mc = new MarkerClusterer(map, markersarray);
            }
        });
    };
    
    function ajaxTagPost(postbounds, tag) {
    
        var obj = {
            mapbounds: boxarray,
            tag: tag
        };
        $.ajax({
            url: "/search",
            type: "POST",
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(obj),
            success: function(data) {
                clearOverlays();
                processTagData(data);
                mc = new MarkerClusterer(map, markersarray);
                $('#maptags').append("<li> " + tag + " </li>")
            }
        });
    };
    
    function create_map() {
        var startLat = <%- lat %>;
        var startLng = <%- lng %>;
        var mapOptions = {
            center: new google.maps.LatLng(startLat, startLng),
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControlOptions: {
                mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, "Toner"]
            },
            styles: [
      {
        "featureType": "landscape.man_made",
        "stylers": [
          { }
        ]
      }
    ],
            panControl: false,
            zoomControl: false,
            scaleControl: false,
            zoomControl: true,
            draggableCursor: "default",
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.SMALL
            },
            streetViewControl: false
        };
    
        map = new google.maps.Map(document.getElementById("mymap"), mapOptions);
        map.mapTypes.set("Toner", new google.maps.StamenMapType("toner"));
        bounds = new google.maps.LatLngBounds();
    
      google.maps.event.addListener(map, "idle", function(){
            clearOverlays();
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxBoundsPost(boxarray);
       })
        // closing create map function
    };
    
    // function to clear overlays
    
    function clearOverlays() {
    if (mc){
       mc.clearMarkers();
    }
        if (markersarray) {
            for (i in markersarray) {
                markersarray[i].setMap(null);
            }
            markersarray.length = 0;
        }
        $('#showroutelist').children().remove().end();
        $('#maptags').children().remove().end();
    };
    
    // place marker function used in processMapData function
    
    function placeMarker(location, title) {
        var marker = new google.maps.Marker({
            position: location,
            map: map,
            flat: true
        });
    
        google.maps.event.addListener(marker, 'click', function() {
            if (infowindow.open) {
                infowindow.close();
            }
            google.maps.event.clearListeners(map, 'idle');
            infowindow.setContent(title);
            infowindow.open(map, marker);   
    
        });
    
        $("<li>").html(title + "</li>").click(function(){
            google.maps.event.clearListeners(map, 'idle');
            infowindow.setContent(title);
            infowindow.open(map, marker);     
    
            //map.panTo(marker.getLatLng());
          }).appendTo("#showroutelist");
        
        google.maps.event.addListener(infowindow, 'closeclick', function(){
        if ($('#maptags').children().length === 1) {
            addTagListeners();
        }
        else {
            addMapListeners();
        }
    
        })
        //map.fitBounds(bounds);
        markersarray.push(marker);
    };
    
    function addMapListeners(){
            google.maps.event.addListener(map, "idle", function(){
            
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxBoundsPost(boxarray);
       })
    }
    
    function addTagListeners(){
            google.maps.event.addListener(map, "idle", function(){
            var newtag = $('#maptags').children().text().trim();     
            var postbounds = map.getBounds();
            processMapBounds(postbounds);
            ajaxTagPost(boxarray, newtag);
       })
    }
    
    function processMapData(maps) {
    var tagarrays = [];
    if (maps.length > 0) {
        for (var i = 0, j = maps.length; i < j; i++) {
            var marker = new google.maps.LatLng(maps[i].loc[0], maps[i].loc[1]);
            bounds.extend(marker);
            var url = maps[i]._id;
            var fullurl = "<span class=\"markerlink\"><a href='/show/" + url + "'>View route</a></span>";
            var title = "<span class=\"marker\">" + maps[i].title + " - " + fullurl + "</span";
            placeMarker(marker, title); 
            tagarrays.push(maps[i].tags);
        };
        var flatarray = _.flatten(tagarrays);
        var reducedarray = _.uniq(flatarray);
       
    
        for (var i = 0, j = reducedarray.length; i < j; i++) {
            var maptag = reducedarray[i].trim();
            $('#maptags').append("<li> " + maptag + " </li>");
        }
    }
    else {
        var lat = map.getCenter().lat();
        var lng = map.getCenter().lng();
        var getparams = $.param({lat:lat, lng:lng});
        var locationurl = "Sorry - no routes for this place - maybe you'd like to add one <a href='/new?" + getparams + "'>here</a>";
        $("<li>").html(locationurl).appendTo("#showroutelist");
        }
    }

    function processTagData(maps) {
    
    if (maps.length > 0) {
        for (var i = 0, j = maps.length; i < j; i++) {
            var marker = new google.maps.LatLng(maps[i].loc[0], maps[i].loc[1]);
            bounds.extend(marker);
            var url = maps[i]._id;
            var fullurl = "<span class=\"markerlink\"><a href='/show/" + url + "'>View route</a></span>";
            var title = "<span class=\"marker\">" + maps[i].title + " - " + fullurl + "</span";
            placeMarker(marker, title); 
        };
    }
    else {
        var lat = map.getCenter().lat();
        var lng = map.getCenter().lng();
        var getparams = $.param({lat:lat, lng:lng});
        var locationurl = "Sorry - no routes for this place - maybe you'd like to add one <a href='/new?" + getparams + "'>here</a>";
        $("<li>").html(locationurl).appendTo("#showroutelist");
        }
    }
    
    // takes bounds and uses internal methods to push map bounds into array to send to server
    
    function processMapBounds(postbounds) {
        boxarray = []; 
        var sw = postbounds.getSouthWest();
        var ne = postbounds.getNorthEast();
        boxarray.push(sw.lat());
        boxarray.push(sw.lng());
        boxarray.push(ne.lat());
        boxarray.push(ne.lng());
        return boxarray;
    }
</script>