
<!doctype html>
<head>
<%-include partials/head.ejs %>


<script src="https://maps-api-ssl.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
<script src="http://code.jquery.com/jquery-latest.js" type="text/javascript"></script>
<script src="http://underscorejs.org/underscore-min.js" type="text/javascript"></script>
<script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js?v1.2.0"></script>

<script type="text/javascript">

var map;
var geocoder;
var cpoints = [];
var cpts = [];
var places = [];
var poly;
var markersarray = [];
var update_timeout = null;
var markerdescs = [];
var start_stop_btn, map, tracker=false, z, op, prev_lat, prev_long, min_speed=0, max_speed=0, min_altitude=0, max_altitude=0, distance_travelled=0, min_accuracy=150, date_pos_updated="", info_string="";

</script>

</head>
<body>
<div id="maincontainer">
<%-include partials/header.ejs %>
    <div id="body"> 
        <div id="container">
            <div class="row">
                <div class="sixcol">
                      <div id="geolocateme"><p>Click here to start a wander near where you are or give us a location below</p></div>
                      <div><p><input id="userlocation"/><input id="userlocationsubmit" type="submit" value="Submit location"/></p></div>
                </div>

                <div class="threecol">
                  <div id="starttracking"><p>
                  <b>Start tracking</b></p>
                </div>
                </div>
                <div class="threecol last">
                <div id="stoptracking"><p>
                  <b>Stop tracking</b></p>
                </div>
                </div>

            </div>
        <div class="row" id="newbuttons">
            <div class="threecol" id="removemarkers"><p>Start again</p></div>
            <div class="threecol" id="removelastmarker"><p>Remove last place</p></div>
            <div class="threecol" id="removelastline"><p>Remove last waypoint</p></div>
            <div class="threecol last" id="user-submit"><p>Submit route</p></div>
        </div>

        <div id="map">
        <div id="mymap"></div>
        </div>
 
        <p id="output"></p>

        <div class="row">
            <div class="sixcol">Title<p><textarea id="title" cols="25" type="text"/></textarea></p><p>Description</p>
            <textarea id="description" rows="7" cols="25" type="text"/></textarea></p><p>Tags (separated by a space please)</p><textarea id="tags" cols="25" type="text"/></textarea></div>
            <div class="sixcol last"><div id="newcontentparent">Places (text boxes will appear below)</div><p id="newcontent"></p></div>
        </div>
        <div id='lengthparent'><p>Distance<div id="length"></p></div></div>
        </div>
    <div class="clearfooter"></div>
</div>
<div id="footer"></div>
</div>
 </body>
</html>

<script>
$(document).ready(function(){

// loads basic map with set centre
create_map();

// click function to run geolocation on click

$("#geolocateme").click(function(){ 
navigator.geolocation.getCurrentPosition(geolocate, function(){});
});

// click function to start tracking

$('#starttracking').click(function(){
  {
    if(!!navigator.geolocation)
      tracker = navigator.geolocation.watchPosition(geo_success, geo_error, {enableHighAccuracy:true, maximumAge:30000, timeout:27000});
    else
      console.log("ERROR: Your Browser doesnt support the Geo Location API");
  }
})

// click function to stop tracking

$('#stoptracking').click(function(){
navigator.geolocation.clearWatch(tracker);
console.log('Tracker cleared');
 $('#starttracking').html("<p><b>Start tracking</b></p>");
 tracker = false;
})

// click function to locate user by reference to submitted location

$('#userlocationsubmit').click(function(){
geocodeAddress();
});

// remove all markers and polylines

$("#removemarkers").click(function() {
    $('#newcontentparent').children().remove().end();
    clearOverlays();
    cpts.clear(); 
    places.splice(0, places.length);
});

// remove last marker 

$("#removelastmarker").click(function(){
    var lastmarker = _.last(markersarray);
    lastmarker.setMap(null);
    markersarray.pop();
    places.pop();
    $('#newcontentparent').children().last().remove().end();
});

$('#removelastline').click(function(){
    cpts.pop(); 
//    var lastp = _.last(cpts);
//    lastp.clear(); 
});


// click to get length

// click function to submit map by creating 'obj' which incorporates hopefully
// clickpoints and markers

$('#user-submit').click(function () {
      
      collectContent();
      convertWaypoints(cpts.b);
      var distance = poly.inKm().toFixed(2);
      var pt = [];
      var x = cpts.b[0].lat();
      var y = cpts.b[0].lng();
      pt.push(x);
      pt.push(y);
      var obj = {
        loc: pt,
        waypoints: newData,
        places: places,
        title: $('#title').val(),
        description: $('#description').val(),
        tags: $('#tags').val(),
        markerdescs: markerdescs,
        distance: distance
        };

    $.ajax({
        url: "/new",
        type: "POST",
        contentType: "application/json",
        processData: false,
        data: JSON.stringify(obj),
        complete: function (data) {
              $('#output').html(data.responseText); 
                setTimeout(function() {
                window.location.href = "/map";
                }, 1000);
            }
        });
    });
});

// function to create basic map on load and add event listeners

function create_map() {
var mapOptions = {
    center: new google.maps.LatLng(51.50678771873268, -0.12717489055171427),
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapTypeControlOptions: {
         mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, "Toner"]
            },
    disableDoubleClickZoom: true,
    panControl: false,
    zoomControl: false,
    scaleControl: false,
    zoomControl: true,
    draggableCursor: "default",
    zoomControlOptions: {
      style: google.maps.ZoomControlStyle.SMALL
    },
    streetViewControl: false
    };
map = new google.maps.Map(document.getElementById("mymap"), mapOptions);
map.mapTypes.set("Toner", new google.maps.StamenMapType("toner"));

// listener to add line on click

var lineSymbol = {
  path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
};

var polyOptions = {
  icons: [{
    icon: lineSymbol,
    offset: '0',
    repeat: '100px'
  }],
  strokeOpacity: 0.5,
  strokeWeight: 3,
  }

poly = new google.maps.Polyline(polyOptions);
poly.setMap(map);

// event listener to extend polyline on click

google.maps.event.addListener(map, 'click', function(event) {
update_timeout = setTimeout(function(){
        cpts = poly.getPath();
        console.log(cpts);
        cpts.push(event.latLng);
        var distance = poly.inKm().toFixed(2);
        $('#length').html("<p>"+ distance + " km");
    }, 200);
});

// listener to add marker on dblclick

google.maps.event.addListener(map,'dblclick', function(event) {
    clearTimeout(update_timeout);
    placeMarker(event.latLng);
    var place = event.latLng;
    var placeobj = new Object();
    placeobj['lat'] = place.lat();
    placeobj['lon'] = place.lng();
    places.push(placeobj);
    $('#newcontentparent').append('<p><textarea class="markerdescription" cols="25" type="text"></textarea></p>')
  });

// listener to add marker on polyline click

google.maps.event.addListener(poly, 'click', function(event) {
    placeMarker(event.latLng);
    var place = event.latLng;
    var placeobj = new Object();
    placeobj['lat'] = place.lat();
    placeobj['lon'] = place.lng();
    places.push(placeobj);
    $('#newcontentparent').append('<p><textarea class="markerdescription" cols="25" type="text"></textarea></p>')
});
// closing create map function
};

function placeMarker(location) {
  var marker = new google.maps.Marker({
      position: location,
      map: map,
  });
  markersarray.push(marker);
};

// function to clear markers

function clearOverlays() {
  if (markersarray) {
    for (i in markersarray) {
      markersarray[i].setMap(null);
    }
    markersarray.length = 0;
    places.length = 0;
  }
};

// function to collect marker descriptions

function collectContent() {
     $('.markerdescription').each(function(i){
        var content = $(this).val();
        markerdescs.push(content);
    })
} ;

// function to watch position

// function to centre map if user geolocates

function geolocate(pos){
    center = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
    map.setCenter(center);
};

// geocode function if user inputs location

function geocodeAddress(){
     var paddress = $("#userlocation").val();
     geocoder = new google.maps.Geocoder();
     geocoder.geocode({'address': paddress}, function(results, status){
        if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
        }
        else{
            alert("Geocode was not successful for the following reason: " + status);
        }
     });
 };

// function to convert polyline into km

google.maps.LatLng.prototype.kmTo = function(a){ 
    var e = Math, ra = e.PI/180; 
    var b = this.lat() * ra, c = a.lat() * ra, d = b - c; 
    var g = this.lng() * ra - a.lng() * ra; 
    var f = 2 * e.asin(e.sqrt(e.pow(e.sin(d/2), 2) + e.cos(b) * e.cos 
(c) * e.pow(e.sin(g/2), 2))); 
    return f * 6378.137; 
  } 

 google.maps.Polyline.prototype.inKm = function(n){ 
    var a = this.getPath(n), len = a.getLength(), dist = 0; 
    for(var i=0; i<len-1; i++){ 
      dist += a.getAt(i).kmTo(a.getAt(i+1)); 
    } 
    return dist; 
  } 

// function to convert waypoints into readable object to database purposes

function convertWaypoints(arrayofwaypoints) {

    newData = [];
    for(var i = 0; i < arrayofwaypoints.length; i++) {
        var obj = new Object();
        obj['lat'] = arrayofwaypoints[i].lat();
        obj['lon'] = arrayofwaypoints[i].lng();
        newData.push(obj);
    }
    return newData;     
}

function geo_success(position)
{
  $('#starttracking').html("<p><b>Tracking...</b></p>"); 
  info_string="";
    
  // Check that the accuracy of our Geo location is sufficient for our needs
  if(position.coords.accuracy<=min_accuracy)
  {
    // We don't want to action anything if our position hasn't changed - we need this because on IPhone Safari at least, we get repeated readings of the same location with 
    // different accuracy which seems to count as a different reading - maybe it's just a very slightly different reading or maybe altitude, accuracy etc has changed
    if(prev_lat!=position.coords.latitude || prev_long!=position.coords.longitude)
    {
      if(position.coords.speed>max_speed)
        max_speed=position.coords.speed;
      else if(position.coords.speed<min_speed)
        min_speed=position.coords.speed;
        
      if(position.coords.altitude>max_altitude)
        max_altitude=position.coords.altitude;
      else if(position.coords.altitude<min_altitude)
        min_altitude=position.coords.altitude;
      
      prev_lat=position.coords.latitude;
      prev_long=position.coords.longitude;
      
      info_string="Current positon: lat="+position.coords.latitude+", lon="+position.coords.longitude+" (accuracy "+Math.round(position.coords.accuracy, 1)+"m)";
      center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      map.setCenter(center);
      cpts = poly.getPath();
      var geopoint = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      cpts.push(geopoint);
      var distance = poly.inKm().toFixed(2);
      $('#length').html("<p>"+ distance + " km");

    }
  }
  else
    info_string="Accuracy not sufficient ("+Math.round(position.coords.accuracy, 1)+"m vs "+min_accuracy+"m)";

  if(info_string)
    console.log(info_string);
}

function geo_error(error)
{
  switch(error.code)
  {
    case error.TIMEOUT:
      console.log("Timeout!");
    break;
  };
}
</script>


